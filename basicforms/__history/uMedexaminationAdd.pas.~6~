unit uMedexaminationAdd;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, ufmBaseForm, cxGraphics, cxControls,
  cxLookAndFeels, cxLookAndFeelPainters, cxContainer, cxEdit, Vcl.ComCtrls,
  dxCore, cxDateUtils, dxLayoutcxEditAdapters, Vcl.StdCtrls, Vcl.ExtCtrls,
  dxLayoutContainer, cxTextEdit, cxDropDownEdit, cxLookupEdit, cxDBLookupEdit,
  cxDBLookupComboBox, cxMaskEdit, cxCalendar, dxLayoutControl, Data.DB,
  ZAbstractRODataset, ZAbstractDataset, ZDataset, System.Actions, Vcl.ActnList,
  uExchDB, uExchDBData, dxBar, cxClasses, uResource, dxLayoutControlAdapters,
  cxMemo, uDisease, uKartUtils;

type
  TfmMedexaminationAdd = class(TfmBaseForm)
    dxLayoutControl1: TdxLayoutControl;
    cxDateEdit1: TcxDateEdit;
    cxLookupComboBox1: TcxLookupComboBox;
    cxTextEdit1: TcxTextEdit;
    cxLookupComboBox2: TcxLookupComboBox;
    dxLayoutControl1Group_Root: TdxLayoutGroup;
    dxLayoutItem2: TdxLayoutItem;
    dxLayoutItem7: TdxLayoutItem;
    dxLayoutItem4: TdxLayoutItem;
    dxLayoutItem5: TdxLayoutItem;
    Panel2: TPanel;
    btnOk: TButton;
    btnCancel: TButton;
    CheckBox1: TCheckBox;
    dxLayoutItem6: TdxLayoutItem;
    dxLayoutItem8: TdxLayoutItem;
    CheckBox2: TCheckBox;
    dsInvalid: TDataSource;
    dsOrganization: TDataSource;
    dxLayoutItem3: TdxLayoutItem;
    cxLookupComboBox3: TcxLookupComboBox;
    dsDisease: TDataSource;
    dxLayoutItem9: TdxLayoutItem;
    Button1: TButton;
    cxMemo1: TMemo;
    dxLayoutItem10: TdxLayoutItem;
    function GenParams(): string;
    procedure FormShow(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
  private
    FMode: integer;
    FID: Variant;
    FDB: TDBData;
    dbIU: TDBData;
    dbOrganization: TDBData;
    dbInvalid: TDBData;
    dbDisease: TDBData;
    procedure InitForm;
    function GetLcbValue(pLcb: TcxLookupComboBox): string; overload;
    function GetLcbValue(pLcb: TcxDateEdit): string; overload;
    function GetLcbValue(pLcb: TcxComboBox): string; overload;
    { Private declarations }
  public
    { Public declarations }
    procedure SetData(pDb: TDBData; pMode: integer; pID: Variant);
  end;

var
  fmMedexaminationAdd: TfmMedexaminationAdd;

implementation
uses
  uOVDAdd;

{$R *.dfm}

procedure TfmMedexaminationAdd.btnCancelClick(Sender: TObject);
begin
  Close;
end;

procedure TfmMedexaminationAdd.btnOkClick(Sender: TObject);
begin
  if FMode = 0 then
  begin
    dbIU := DataSetQuery('medexamination_set', ['0', VarToStr(FMode), Resource.sessionInfo.token_id, GenParams()]);
  end
  else
  begin
    dbIU := DataSetQuery('medexamination_set', [FDB.DataSet.FieldByName('id').Value, VarToStr(FMode), Resource.sessionInfo.token_id, GenParams()]);
  end;
  Close;
end;

procedure TfmMedexaminationAdd.Button1Click(Sender: TObject);
var
  fm: TfmDisease;
begin

  fm := TfmDisease(CreateForm('TfmDisease', 'fmDisease', Self, false));
  try
    if ( fm.ShowModal() = mrOk ) then
    begin

     // dbBase.DataSetReQuery;

    end;
    {fm.SetData(dbBase, 0, ginformation);
    if ( fm.ShowModal() = mrOk ) then begin

      dbBase.DataSetReQuery;

    end;  }
  finally
    fm.Free;
  end;
end;

procedure TfmMedexaminationAdd.FormShow(Sender: TObject);
var
  Columns: string;
  Params: string;
  Operations: string;
begin
  InitForm;
   if (FMode = 1) and (not FDB.DataSet.IsEmpty) then
   begin
      with FDB.DataSet do
      begin
        cxDateEdit1.EditValue := FieldByName('observation_date').Value;
        cxMemo1.Text := FieldByName('medical_report').Value;
        CheckBox2.Checked := FieldByName('no_court_disease').AsBoolean;
        CheckBox1.Checked := FieldByName('pr_pregnancy').AsBoolean;
        cxTextEdit1.Text := FieldByName('doctor').Value;
        cxLookupComboBox1.EditValue := FieldByName('org_id').Value;
        cxLookupComboBox2.EditValue := FieldByName('pr_invalid_id').Value;
        cxLookupComboBox3.EditValue := FieldByName('disease_id').Value;
      end;
   end;
   EnabledEdData(Self, gNameForm, 'fmMedexaminationAdd',  1);
end;

procedure TfmMedexaminationAdd.InitForm;
begin
  dbInvalid := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM pr_invalid AS s  ', []);
  dsInvalid.DataSet := dbInvalid.DataSet;

  dbOrganization := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM company_directory_organization AS s  '+
   '  where s.type_org = 1', []);
  dsOrganization.DataSet := dbOrganization.DataSet;

  dbDisease := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM directory_diseaseclass AS s ', []);
  dsDisease.DataSet := dbDisease.DataSet;
end;

procedure TfmMedexaminationAdd.SetData(pDb: TDBData; pMode: integer; pID: Variant);
begin
  FDB := pDb;
  FID := pID;
  FMode := pMode;
end;

function TfmMedexaminationAdd.GetLcbValue(pLcb: TcxLookupComboBox): string;
begin
  if VarIsNull(pLcb.EditValue) then
    result := 'NULL'
  else
    result := VarToStr(pLcb.EditValue);
end;

function TfmMedexaminationAdd.GetLcbValue(pLcb: TcxDateEdit): string;
begin
  if VarIsNull(pLcb.EditValue) then
    result := 'NULL'
  else
    result := FormatDateTime('mm-dd-yyyy',pLcb.EditValue{, Resource.JsonFormatSettings});
  // result := DateToStr(pLcb.EditValue{, Resource.JsonFormatSettings});
end;

function TfmMedexaminationAdd.GetLcbValue(pLcb: TcxComboBox): string;
begin
  case (pLcb.ItemIndex) of
    0:
      result := 'true';
    1:
      result := 'false';
  end;
end;

function TfmMedexaminationAdd.GenParams(): string;
begin
  result := '';
  result := result + GetLcbValue(cxDateEdit1) + '~';
  IF cxMemo1.Text <> '' then
    result := result + cxMemo1.Text + '~'
  else
    result := result + 'NULL' + '~';
  Result := Result + BoolToStr(CheckBox2.Checked, True) + '~';
  Result := Result + BoolToStr(CheckBox1.Checked, True) + '~';

  IF cxTextEdit1.Text <> '' then
    result := result + cxTextEdit1.Text + '~'
  else
    result := result + 'NULL' + '~';

  result := result + GetLcbValue(cxLookupComboBox1) + '~';

  result := result + GetLcbValue(cxLookupComboBox3) + '~';

  result := result + GetLcbValue(cxLookupComboBox2) + '~';
  //result := result + cxbedtNameShort.Text + '~';

  result := result + VarToStr(FID) + '~';

end;

end.
