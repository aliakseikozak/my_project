unit uMedAssessmentAdd;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, ufmBaseForm, System.Actions,
  Vcl.ActnList, dxBar, cxClasses, Data.DB, cxGraphics, cxControls,
  cxLookAndFeels, cxLookAndFeelPainters, cxContainer, cxEdit, Vcl.ComCtrls,
  dxCore, cxDateUtils, dxLayoutcxEditAdapters, dxLayoutControlAdapters,
  Vcl.StdCtrls, Vcl.ExtCtrls, dxLayoutContainer, cxDropDownEdit, cxCalendar,
  cxMaskEdit, cxLookupEdit, cxDBLookupEdit, cxDBLookupComboBox, cxTextEdit,
  dxLayoutControl, uKartUtils, uExchDB, uExchDBData, uResource;

type
  TfmMedAssessmentAdd = class(TfmBaseForm)
    dxLayoutControl1: TdxLayoutControl;
    cxTextEdit1: TcxTextEdit;
    cxLookupComboBox3: TcxLookupComboBox;
    cxLookupComboBox4: TcxLookupComboBox;
    cxLookupComboBox5: TcxLookupComboBox;
    cxLookupComboBox6: TcxLookupComboBox;
    cxLookupComboBox2: TcxLookupComboBox;
    cxLookupComboBox1: TcxLookupComboBox;
    cxDateEdit1: TcxDateEdit;
    cxLookupComboBox7: TcxLookupComboBox;
    cxCheckBox1: TCheckBox;
    dxLayoutControl1Group_Root: TdxLayoutGroup;
    dxLayoutItem4: TdxLayoutItem;
    dxLayoutItem2: TdxLayoutItem;
    dxLayoutItem6: TdxLayoutItem;
    dxLayoutItem8: TdxLayoutItem;
    dxLayoutItem9: TdxLayoutItem;
    dxLayoutItem5: TdxLayoutItem;
    dxLayoutItem7: TdxLayoutItem;
    dxLayoutItem3: TdxLayoutItem;
    dxLayoutItem10: TdxLayoutItem;
    dxLayoutItem11: TdxLayoutItem;
    Panel2: TPanel;
    btnOk: TButton;
    btnCancel: TButton;
    dxLayoutItem1: TdxLayoutItem;
    cxDateEdit2: TcxDateEdit;
    dxLayoutItem12: TdxLayoutItem;
    cxLookupComboBox8: TcxLookupComboBox;
    dxLayoutItem13: TdxLayoutItem;
    cxLookupComboBox9: TcxLookupComboBox;
    dxLayoutItem14: TdxLayoutItem;
    cxLookupComboBox10: TcxLookupComboBox;
    dxLayoutItem15: TdxLayoutItem;
    cxLookupComboBox11: TcxLookupComboBox;
    cxLookupComboBox12: TcxLookupComboBox;
    dxLayoutItem16: TdxLayoutItem;
    dsReabReriod: TDataSource;
    dsCommunication: TDataSource;
    dsRegion: TDataSource;
    dsUpr: TDataSource;
    dsAge: TDataSource;
    dsdependency: TDataSource;
    dsrequirement1: TDataSource;
    dsrequirement2: TDataSource;
    dsrequirement3: TDataSource;
    dsrequirement4: TDataSource;
    dsrequirement5: TDataSource;
    function GenParams(): string;
    procedure FormShow(Sender: TObject);
  private
    FMode: integer;
    FID: Variant;
    FDB: TDBData;
    dbIU: TDBData;
    dbReabReriod: TDBData;
    dbUpr: TDBData;
    dbAge: TDBData;
    dbRegion: TDBData;
    dbCommunication: TDBData;
    dbrequirement1: TDBData;
    dbrequirement2: TDBData;
    dbrequirement3: TDBData;
    dbrequirement4: TDBData;
    dbrequirement5: TDBData;
    dbdependency: TDBData;
    dbAlcohol: TDBData;
    dbWork: TDBData;
    procedure InitForm;
    function GetLcbValue(pLcb: TcxLookupComboBox): string; overload;
    function GetLcbValue(pLcb: TcxDateEdit): string; overload;
    function GetLcbValue(pLcb: TcxComboBox): string; overload;
  public
    { Public declarations }
    procedure SetData(pDb: TDBData; pMode: integer; pID: Variant);
  end;

var
  fmMedAssessmentAdd: TfmMedAssessmentAdd;

implementation
uses
  uOVDAdd;

{$R *.dfm}

procedure TfmMedAssessmentAdd.FormShow(Sender: TObject);
var
  Columns: string;
  Params: string;
  Operations: string;
  i : integer;
begin
  InitForm;
   if (FMode = 1) and (not FDB.DataSet.IsEmpty) then
   begin
      with FDB.DataSet do
      begin
        cxLookupComboBox1.EditValue := FieldByName('rehabilitation_period_id').Value;
        cxDateEdit1.EditValue := FieldByName('assessment_date').Value;
        cxLookupComboBox5.EditValue := FieldByName('upr_id').Value;
        cxLookupComboBox4.EditValue := FieldByName('age_id').Value;
        cxLookupComboBox3.EditValue := FieldByName('resident_id').Value;
        cxLookupComboBox6.EditValue := FieldByName('soc_communication_id').Value;
        cxLookupComboBox2.EditValue := FieldByName('requirement_1_id').Value;
        cxLookupComboBox7.EditValue := FieldByName('requirement_2_id').Value;
        cxTextEdit1.Text := FieldByName('add_information').Value;
        cxCheckBox1.Checked := FieldByName('work_citizen').AsBoolean;
      end;
     EnabledEdData(Self, gNameForm, 'fmSocAssessmentAdd',  1);
   end;
end;

function TfmMedAssessmentAdd.GenParams(): string;
begin
  result := '';
  result := result + GetLcbValue(cxDateEdit1) + '~';
  Result := Result + BoolToStr(cxCheckBox1.Checked, True) + '~';
  IF cxTextEdit1.Text <> '' then
    result := result + cxTextEdit1.Text + '~'
  else
    result := result + 'NULL' + '~';
  result := result + GetLcbValue(cxLookupComboBox1) + '~';
  result := result + GetLcbValue(cxLookupComboBox2) + '~';
  result := result + GetLcbValue(cxLookupComboBox7) + '~';
  result := result + GetLcbValue(cxLookupComboBox6) + '~';
  result := result + GetLcbValue(cxLookupComboBox5) + '~';
  result := result + GetLcbValue(cxLookupComboBox4) + '~';
  result := result + GetLcbValue(cxLookupComboBox3) + '~';
  result := result + 'NULL' + '~';
  result := result + VarToStr(FID) + '~';

end;

function TfmMedAssessmentAdd.GetLcbValue(pLcb: TcxLookupComboBox): string;
begin
  if VarIsNull(pLcb.EditValue) then
    result := 'NULL'
  else
    result := VarToStr(pLcb.EditValue);
end;

function TfmMedAssessmentAdd.GetLcbValue(pLcb: TcxDateEdit): string;
begin
  if VarIsNull(pLcb.EditValue) then
    result := 'NULL'
  else
    result := FormatDateTime('mm-dd-yyyy',pLcb.EditValue{, Resource.JsonFormatSettings});
  // result := DateToStr(pLcb.EditValue{, Resource.JsonFormatSettings});
end;

function TfmMedAssessmentAdd.GetLcbValue(pLcb: TcxComboBox): string;
begin
  case (pLcb.ItemIndex) of
    0:
      result := 'true';
    1:
      result := 'false';
  end;
end;


procedure TfmMedAssessmentAdd.SetData(pDb: TDBData; pMode: integer; pID: Variant);
begin
  FDB := pDb;
  FID := pID;
  FMode := pMode;
end;

procedure TfmMedAssessmentAdd.InitForm;
begin
  dbReabReriod := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM soc_rehabilitation_period AS s  ' , []);
  dsReabReriod.DataSet := dbReabReriod.DataSet;

  dbUpr := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM upr AS s  ' , []);
  dsUpr.DataSet := dbUpr.DataSet;

  dbAge := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM age AS s  ' , []);
  dsAge.DataSet := dbAge.DataSet;

  dbRegion := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM region AS s  ' , []);
  dsRegion.DataSet := dbRegion.DataSet;

  dbCommunication := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM soc_communication AS s  ' , []);
  dsCommunication.DataSet := dbCommunication.DataSet;
  //Вид зависимости
  dbdependency := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM dependence_type AS s  ' , []);
  dsdependency.DataSet := dbdependency.DataSet;
  //Оценка медико-социального критерия
 { dbassessment := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM find_work AS s  ' , []);
  dsassessment.DataSet := dbassessment.DataSet; }
  //Терапевтическая активность посещения врача-психиатора-нарколога
  dbrequirement1 := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM doctor_visit AS s  ' , []);
  dsrequirement1.DataSet := dbrequirement1.DataSet;
  //Срок терапевтической ремиссии
  dbrequirement2 := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM remission AS s  ' , []);
  dsrequirement2.DataSet := dbrequirement2.DataSet;
  //Количество рецедивов заболевания
  dbrequirement3 := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM relapse AS s  ' , []);
  dsrequirement3.DataSet := dbrequirement3.DataSet;
  //Степень выраженности влечения к употреблению ПАВ
  dbrequirement4 := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM attraction AS s  ' , []);
  dsrequirement4.DataSet := dbrequirement4.DataSet;
  //Частота употребления ПАВ
  dbrequirement5 := TDBData.Create(Resource.sessionInfo, TDBHTTP.TypeRequest, TDBHTTP.TypeQuerySQL,
   ' SELECT s.id, s.name  '+
   '   FROM pas_periodicity AS s  ' , []);
  dsrequirement5.DataSet := dbrequirement5.DataSet;
end;

end.
