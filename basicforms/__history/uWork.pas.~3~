unit uWork;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uKartUtils, uOVDAdd, ufmBaseGrid,
  cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters, cxContainer,
  cxEdit, dxLayoutControlAdapters, cxStyles, cxCustomData, cxFilter, cxData,
  cxDataStorage, cxNavigator, Data.DB, cxDBData, Vcl.Menus, System.Actions,
  Vcl.ActnList, dxBar, cxClasses, cxSplitter, cxGridLevel, cxGridCustomView,
  cxGridCustomTableView, cxGridTableView, cxGridDBTableView, cxGrid,
  dxLayoutContainer, Vcl.StdCtrls, dxLayoutControl, cxLabel, Vcl.ExtCtrls
  , uResource, uWorkAdd, ZAbstractRODataset, ZAbstractDataset, ZDataset;

type
  TfmWork = class(TfmBaseGrid)
    grBaseDBTableViewColumn1: TcxGridDBColumn;
    grBaseDBTableViewColumn2: TcxGridDBColumn;
    grBaseDBTableViewColumn3: TcxGridDBColumn;
    grBaseDBTableViewColumn4: TcxGridDBColumn;
    grBaseDBTableViewColumn5: TcxGridDBColumn;
    procedure actGetDataExecute(Sender: TObject);
    procedure actNewExecute(Sender: TObject);
    procedure actEditExecute(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  fmWork: TfmWork;

implementation

{$R *.dfm}


procedure TfmWork.actEditExecute(Sender: TObject);
var
  fm: TfmWorkAdd;
begin
  if dbBase.DataSet.IsEmpty then
    Exit;

  fm := TfmWorkAdd(CreateForm('TfmWorkAdd', 'fmWorkAdd', Self, false));
  try

    fm.SetData(dbBase, 1, ginformation);
    if ( fm.ShowModal() = mrOk ) then
    begin

      dbBase.DataSetReQuery;

    end;
  finally
    fm.Free;
  end;
end;

procedure TfmWork.actGetDataExecute(Sender: TObject);
var
  Columns: string;
  Params: string;
  Operations: string;
begin

  with Filtered(Self) do
  begin
    Columns := Column;
    Params := Param;
    Operations := Operation;
  end;

  FreeAndNil(dbBase);
  if ginformation <> 0 then
  begin
//    dbBase := DataSetQuery('work_get', [Resource.sessionInfo.token_id, '1', 'bmf.grinformation_id', VarToStr(ginformation), '='], GetFieldsArray(), true);
    dbBase := DataSetQuery('work_get', [Resource.sessionInfo.token_id, '1', '', '', ''], GetFieldsArray(), true);

    dsBase.DataSet := dbBase.DataSet;
  end;
end;

procedure TfmWork.actNewExecute(Sender: TObject);
var
  fm: TfmWorkAdd;
begin
  if dbBase.DataSet.IsEmpty then
    Exit;

  fm := TfmWorkAdd(CreateForm('TfmWorkAdd', 'fmWorkAdd', Self, false));
  try

    fm.SetData(dbBase, 0, ginformation);
    if ( fm.ShowModal() = mrOk ) then
    begin

      dbBase.DataSetReQuery;

    end;
  finally
    fm.Free;
  end;
end;

procedure TfmWork.FormShow(Sender: TObject);
begin
  actGetData.Execute;

end;

end.
