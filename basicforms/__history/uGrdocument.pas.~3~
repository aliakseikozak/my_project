unit uGrdocument;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, ufmBaseGrid, cxGraphics, cxControls,
  cxLookAndFeels, cxLookAndFeelPainters, cxContainer, cxEdit,
  dxLayoutControlAdapters, cxStyles, cxCustomData, cxFilter, cxData,
  cxDataStorage, cxNavigator, Data.DB, cxDBData, Vcl.Menus, System.Actions,
  Vcl.ActnList, dxBar, cxClasses, cxSplitter, cxGridLevel, cxGridCustomView,
  cxGridCustomTableView, cxGridTableView, cxGridDBTableView, cxGrid,
  dxLayoutContainer, Vcl.StdCtrls, dxLayoutControl, cxLabel, Vcl.ExtCtrls,
  uGrdocumentAdd, uResource, uKartUtils;

type
  TfmGrdocument = class(TfmBaseGrid)
    grBaseDBTableViewColumn1: TcxGridDBColumn;
    grBaseDBTableViewColumn2: TcxGridDBColumn;
    grBaseDBTableViewColumn3: TcxGridDBColumn;
    grBaseDBTableViewColumn4: TcxGridDBColumn;
    grBaseDBTableViewColumn5: TcxGridDBColumn;
    procedure actEditExecute(Sender: TObject);
    procedure actNewExecute(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure actGetDataExecute(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  fmGrdocument: TfmGrdocument;

implementation

uses
  uOVDAdd;

{$R *.dfm}

procedure TfmGrdocument.actEditExecute(Sender: TObject);
var
  fm: TfmGrdocumentAdd;
begin
  if dbBase.DataSet.IsEmpty then
    Exit;

  fm := TfmGrdocumentAdd(CreateForm('TfmGrdocumentAdd', 'fmGrdocumentAdd', Self, false));
  try
  //  fm.ListDepId := ListDepId;
  //  fm.ListCuttingAreaId := ListCuttingArea;
    fm.SetData(dbBase, 1, ginformation);
    if ( fm.ShowModal() = mrOk ) then begin

      dbBase.DataSetReQuery;

    end;
  finally
    fm.Free;
  end;
end;

procedure TfmGrdocument.actGetDataExecute(Sender: TObject);
var
  Columns: string;
  Params: string;
  Operations: string;
begin

  with Filtered(Self) do
  begin
    Columns := Column;
    Params := Param;
    Operations := Operation;
  end;

  FreeAndNil(dbBase);
  if ginformation <> 0 then
  begin
    dbBase := DataSetQuery('document_get', [Resource.sessionInfo.token_id, '1', 'bmf.grinformation_id', VarToStr(ginformation), '='], GetFieldsArray(), true);
    dsBase.DataSet := dbBase.DataSet;
  end;
end;

procedure TfmGrdocument.actNewExecute(Sender: TObject);
var
  fm: TfmGrdocumentAdd;
begin
  {
  if dbBase.DataSet.IsEmpty then
    Exit;
   }
  fm := TfmGrdocumentAdd(CreateForm('TfmGrdocumentAdd', 'fmGrdocumentAdd', Self, false));
  try
    fm.SetData(dbBase, 0, ginformation);
    if ( fm.ShowModal() = mrOk ) then begin

      dbBase.DataSetReQuery;

    end;
  finally
    fm.Free;
   // gCaptionName := 'Склады';
  end;

end;

procedure TfmGrdocument.FormShow(Sender: TObject);
begin
  actGetData.Execute;
end;

end.
