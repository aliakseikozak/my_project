unit uCommissionDecision;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, ufmBaseGrid, cxGraphics, cxControls,
  cxLookAndFeels, cxLookAndFeelPainters, cxContainer, cxEdit,
  dxLayoutControlAdapters, cxStyles, cxCustomData, cxFilter, cxData,
  cxDataStorage, cxNavigator, Data.DB, cxDBData, Vcl.Menus, ZAbstractRODataset,
  ZAbstractDataset, ZDataset, System.Actions, Vcl.ActnList, dxBar, cxClasses,
  cxSplitter, cxGridLevel, cxGridCustomView, cxGridCustomTableView,
  cxGridTableView, cxGridDBTableView, cxGrid, dxLayoutContainer, Vcl.StdCtrls,
  dxLayoutControl, cxLabel, Vcl.ExtCtrls, uKartUtils, uResource, uCommissionDecisionAdd,
  uExchDB, uExchDBData;

type
  TfmCommissionDecision = class(TfmBaseGrid)
    grBaseDBTableViewColumn1: TcxGridDBColumn;
    grBaseDBTableViewColumn2: TcxGridDBColumn;
    grBaseDBTableViewColumn3: TcxGridDBColumn;
    grBaseDBTableViewColumn4: TcxGridDBColumn;
    grBaseDBTableViewColumn5: TcxGridDBColumn;
    grBaseDBTableViewColumn6: TcxGridDBColumn;
    grBaseDBTableViewColumn7: TcxGridDBColumn;
    grBaseDBTableViewColumn8: TcxGridDBColumn;
    DataSource1: TDataSource;
    procedure FormShow(Sender: TObject);
    procedure actEditExecute(Sender: TObject);
    procedure actNewExecute(Sender: TObject);
  private
    FMode: integer;
    FID: Variant;
    FDB: TDBData;
    dbIU: TDBData;
    { Private declarations }
  public
    { Public declarations }
    procedure SetData(pDb: TDBData; pMode: integer; pID: Variant);
  end;

var
  fmCommissionDecision: TfmCommissionDecision;

implementation

{$R *.dfm}

procedure TfmCommissionDecision.actEditExecute(Sender: TObject);
var
  fm: TfmCommissionDecisionAdd;
begin
 { if dbBase.DataSet.IsEmpty then
    Exit;
          }
  fm := TfmCommissionDecisionAdd(CreateForm('TfmCommissionDecisionAdd', 'fmCommissionDecisionAdd', Self, false));
  try

    fm.SetData(dbBase, 1, 1{покуда так---ginformation});
    if ( fm.ShowModal() = mrOk ) then begin

      dbBase.DataSetReQuery;

    end;
  finally
    fm.Free;
  end;
end;

procedure TfmCommissionDecision.actNewExecute(Sender: TObject);
var
  fm: TfmCommissionDecisionAdd;
begin
 { if dbBase.DataSet.IsEmpty then
    Exit;
          }
  fm := TfmCommissionDecisionAdd(CreateForm('TfmCommissionDecisionAdd', 'fmCommissionDecisionAdd', Self, false));
  try

    fm.SetData(dbBase, 0, 1{покуда так---ginformation});
    if ( fm.ShowModal() = mrOk ) then begin

      dbBase.DataSetReQuery;

    end;
  finally
    fm.Free;
  end;
end;

procedure TfmCommissionDecision.FormShow(Sender: TObject);
var
  Columns: string;
  Params: string;
  Operations: string;
begin
  pnParam.Visible := false;
  cxspltrParam.Visible:= False;

  with Filtered(Self) do
  begin
    Columns := Column;
    Params := Param;
    Operations := Operation;
  end;

  FreeAndNil(dbBase);

  dbBase := DataSetQuery('commissiondecisio_get', [Resource.sessionInfo.token_id, '1', 'bmf.grdoctoltp_id', VarToStr(FID), '='], GetFieldsArray(), true);
  dsBase.DataSet := dbBase.DataSet;

end;

procedure TfmCommissionDecision.SetData(pDb: TDBData; pMode: integer; pID: Variant);
begin
  FDB := pDb;
  FID := pID;
  FMode := pMode;
end;


end.
